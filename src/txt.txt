// import { useContext, useState, useEffect } from "react"
// import { useNavigate } from "react-router-dom"
// import { collection, getDocs, query, where } from "firebase/firestore"
// import { firestore } from "../../Firebase/config"
// import { Mycontext } from "../Context/Context"
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select"
// import { MapPin, Phone, GraduationCap, BookOpen, Award, Users } from "lucide-react"

// const Home = () => {
//   const { result, setResult } = useContext(Mycontext);
//   const [exam, setExam] = useState('');
//   const [regNo, setRegNo] = useState('');
//   const [error, setError] = useState('');
//   const [loading, setLoading] = useState(false);
//   const [exams, setExams] = useState([]);
//   const [loadingExams, setLoadingExams] = useState(true);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchExams = async () => {
//       try {
//         setLoadingExams(true);
//         const examMarksSnapshot = await getDocs(collection(firestore, 'examMarks'));
//         const examsMap = new Map();
//         examMarksSnapshot.docs.forEach(doc => {
//           const data = doc.data();
//           if (data.examName && data.examId) {
//             examsMap.set(data.examName.toLowerCase(), {
//               id: data.examId,
//               name: data.examName
//             });
//           }
//         });
//         const uniqueExams = Array.from(examsMap.values()).sort((a, b) => 
//           a.name.localeCompare(b.name)
//         );
//         setExams(uniqueExams);
//       } catch (error) {
//         console.error('Error fetching exams:', error);
//         setError('Failed to load exams. Please try again.');
//       } finally {
//         setLoadingExams(false);
//       }
//     };

//     fetchExams();
//   }, []);

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     setError('');
    
//     if (!exam || !regNo) {
//       setError('Please select an exam and enter a registration number.');
//       setResult(null);
//       return;
//     }

//     setLoading(true);

//     try {
//       const studentsSnapshot = await getDocs(collection(firestore, 'students'));
//       const student = studentsSnapshot.docs.find(doc => 
//         doc.data().regNo === regNo || doc.data().registrationNumber === regNo
//       );

//       if (!student) {
//         setError('Student not found with this registration number.');
//         setLoading(false);
//         return;
//       }

//       const studentData = student.data();
      
//       const examMarksQuery = query(
//         collection(firestore, 'examMarks'),
//         where('regNo', '==', regNo),
//         where('examId', '==', exam)
//       );
      
//       const examMarksSnapshot = await getDocs(examMarksQuery);
      
//       if (examMarksSnapshot.empty) {
//         setError('No results found for this student and exam combination.');
//         setLoading(false);
//         return;
//       }

//       const examMarksData = examMarksSnapshot.docs[0].data();
//       const marks = examMarksData.subjects || [];
//       const maxMarks = marks.length * 5; 
//       const total = marks.reduce((sum, { score }) => score > 0 ? sum + score : sum, 0);

//       const percentage = maxMarks > 0 ? (total / maxMarks) * 100 : 0;
    
//       const resultData = {
//         studentName: studentData.name || studentData.studentName || 'Unknown',
//         regNo: regNo,
//         examName: exams.find(e => e.id === exam)?.name || examMarksData.examName || exam,
//         marks: marks, 
//         total: total,
//         percentage: Number.parseFloat(percentage.toFixed(2)),
//         studentData: studentData,
//         examData: examMarksData
//       };

//       sessionStorage.setItem("result", JSON.stringify(resultData));
//       setResult(resultData);
//       navigate("/result");

//     } catch (error) {
//       console.error('Error fetching student data:', error);
//       setError('Failed to fetch student data. Please try again.');
//     } finally {
//       setLoading(false);
//     }
//   };

//   if (loadingExams) {
//     return (
//       <div className="flex justify-center items-center min-h-screen w-full bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900">
//         <div className="text-center flex gap-3 ">
//           <div className="animate-spin rounded-full h-6 w-6 border-t-3 border-b-3 border-white mx-auto mb-4"></div>
//           <p className="text-white/80 text-lg">Loading Portal...</p>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <>

//       <div className="min-h-screen flex flex-col relative overflow-y-scroll  scrollbar-hidden ">
//         {/* <div className="absolute inset-0  bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100"> */}
//         <div className="absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900">
//           <div className="absolute inset-0 opacity-10">
//             <div className="absolute top-0 left-0 w-full h-full bg-[url('data:image/svg+xml,%3Csvg width=\'60\' height=\'60\' viewBox=\'0 0 60 60\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cg fill=\'none\' fill-rule=\'evenodd\'%3E%3Cg fill=\'%23ffffff\' fill-opacity=\'0.1\'%3E%3Ccircle cx=\'30\' cy=\'30\' r=\'2\'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')]"></div>
//           </div>
//           <div className="absolute top-20 left-10 w-20 h-20 bg-blue-400/20 rounded-full blur-xl animate-pulse"></div>
//           <div className="absolute top-40 right-20 w-32 h-32 bg-indigo-400/20 rounded-full blur-xl animate-pulse delay-1000"></div>
//           <div className="absolute bottom-40 left-20 w-24 h-24 bg-purple-400/20 rounded-full blur-xl animate-pulse delay-2000"></div>
//           <div className="absolute bottom-20 right-10 w-16 h-16 bg-cyan-400/20 rounded-full blur-xl animate-pulse delay-3000"></div>
//         </div>

//         {/* Header */}
//         <div className="relative lg:top-3 ">
//           <div className="container mx-auto px-6 py-4">
//             <div className="flex items-center justify-between">
//               <div className="flex items-center gap-4">
//                 <div className="w-12 h-12  items-center justify-center ">
//                   <img
//                     src="/Yaseen Logo.png"
//                     alt="School Logo"
//                     className="w-10 h-10 ml-2 object-contain"
//                   />            
//                       </div>
//                 <div>
//                   <h1 className="text-xl font-bold text-white/90">RAZA-UL ULOOM ISLAMIA</h1>
//                   <p className="text-blue-200 text-sm">Higher Secondary School</p>
//                 </div>
//               </div>
//               <div className="hidden md:flex items-center gap-6 text-white/80">
//                 <div className="flex items-center gap-2">
//                   <BookOpen className="w-4 h-4" />
//                   <span className="text-sm">Excellence in Education</span>
//                 </div>
//               </div>
//             </div>
//           </div>
//         </div>

//         {/* Main Content */}
//         <div className="relative z-10 flex-grow flex items-center justify-center px-4 py-8 ">
//           <div className="w-full max-w-6xl mx-auto">
//             <div className="grid lg:grid-cols-2 gap-12 items-center ">
              
//               {/* Left Side - Information */}
//               <div className="text-center lg:text-left lg:flex flex-col hidden">
//                 <div className="mb-8">
//                   <h2 className="text-4xl lg:text-5xl font-bold text-white mb-4 leading-tight">
//                     Term Examination
//                     <span className="block text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-orange-500">
//                       Result Portal
//                     </span>
//                   </h2>
//                   <p className="text-blue-200 text-lg mb-6">
//                     Access your academic achievements instantly and securely
//                   </p>
//                 </div>

//                 {/* Stats Cards */}
//                 <div className="grid grid-cols-2 gap-4 mb-8">
//                   <div className="bg-white/10 backdrop-blur-md rounded-xl p-4 border border-white/20">
//                     <div className="flex items-center gap-3">
//                       <div className="w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center">
//                         <Users className="w-5 h-5 text-green-400" />
//                       </div>
//                       <div>
//                         <p className="text-white font-semibold">5000+</p>
//                         <p className="text-blue-200 text-sm">Students</p>
//                       </div>
//                     </div>
//                   </div>
//                   <div className="bg-white/10 backdrop-blur-md rounded-xl p-4 border border-white/20">
//                     <div className="flex items-center gap-3">
//                       <div className="w-10 h-10 bg-purple-500/20 rounded-lg flex items-center justify-center">
//                         <GraduationCap   className="w-5 h-5 text-purple-400" />
//                       </div>
//                       <div>
//                         <p className="text-white font-semibold">98%</p>
//                         <p className="text-blue-200 text-sm">Success Rate</p>
//                       </div>
//                     </div>
//                   </div>
//                 </div>
//               </div>

//               {/* Right Side - Form */}
//               <div className="flex justify-center">
//                 <div className="w-full max-w-md">
//                   <div className="bg-white/10 backdrop-blur-md rounded-2xl shadow-2xl p-8 border border-white/20">
//                     <div className="text-center mb-8">
//                       <h3 className="text-2xl font-bold text-white mb-2">
//                         Check Your Results
//                       </h3>
//                       <p className="text-blue-200 text-sm">Enter your details to view examination results</p>
//                     </div>

//                     <form onSubmit={handleSubmit} className="space-y-6">
//                       <div>
//                         <label htmlFor="exam" className="block text-sm font-medium text-white mb-2">
//                           Select Examination
//                         </label>
//                         <Select
//                           onValueChange={(value) => setExam(value)}
//                           value={exam}
//                           disabled={loadingExams || exams.length === 0}
//                         >
//                           <SelectTrigger className="w-full h-12 bgs-white/10 border-white/20 text-white backdrop-blur-md hover:bg-white/20 transition-all ">
//                             <SelectValue 
//                               placeholder={ loadingExams ? "Loading examinations..." : exams.length === 0 ? "No examinations available" : "Select an examination" } 
//                             />
//                           </SelectTrigger>
//                           <SelectContent className="">
//                             {exams.map((examItem) => (
//                               <SelectItem 
//                                 key={examItem.id} 
//                                 value={examItem.id}
//                                 className=" hover:bg-slate-700  text-black "
//                               >
//                                 {examItem.name}
//                               </SelectItem>
//                             ))}
//                           </SelectContent>
//                         </Select>
//                       </div>

//                       <div>
//                         <label htmlFor="regNo" className="block text-sm font-medium text-white mb-2">
//                           Registration Number
//                         </label>
//                         <input
//                           id="regNo"
//                           type="text"
//                           value={regNo}
//                           onChange={(e) => setRegNo(e.target.value)}
//                           placeholder="Enter your registration number"
//                           className="w-full h-10 px-4 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-200 backdrop-blur-md focus:border-blue-400 focus:ring-2 focus:ring-blue-400/50 focus:outline-none transition-all"
//                         />
//                       </div>

//                       {error && (
//                         <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-3">
//                           <p className="text-red-200 text-sm">{error}</p>
//                         </div>
//                       )}

//                       <button
//                         type="submit"
//                         disabled={loading || loadingExams || exams.length === 0}
//                         className="w-full h-12 bg-blue-900 hover:bg-blue-800 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-[1.01] shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center gap-2"
//                       >
//                         {loading ? (
//                           <>
//                             <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white"></div>
//                             Loading...
//                           </>
//                         ) : (
//                           <>
//                             View Results
//                           </>
//                         )}
//                       </button>
//                     </form>
//                   </div>
//                 </div>
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//             <footer className="text-center py-8 bg-gradient-to-br from-gray-900 to-blue-900 text-white/90 px-4">
//        <p className="text-sm font-bold">RAZA-UL ULOOM ISLAMIA HIGHER SECONDARY SCHOOL</p>
//          <div className="flex lg:items-center justify-center lg:text-sm mt-1 text-xs items-start">
//            <MapPin className="w-4 h-4 mr-1" />
//            <span>Parade Ground, Old City, Poonch, Jammu and Kashmir 185101</span>
//          </div>
//          <div className="flex items-center justify-center text-sm mt-1">
//            <Phone className="w-4 h-4 mr-1" />
//            <span>Phone:+91 072980 10127</span>
//          </div>
//          <p className="text-sm mt-2 text-gray-400">© 2025 RAZA-UL ULOOM ISLAMIA HIGHER SECONDARY SCHOOL. All rights reserved.</p>
//        </footer>
//     </>
//   );
// };

// export default Home;




// import React, { useState, useEffect } from 'react';
// import { Users, BookOpen, Award, TrendingUp, Calendar, Bell, Search, Filter, BarChart3, PieChart, Download } from 'lucide-react';
// import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, PieChart as RechartsPieChart, Pie, Cell, LineChart, Line, ResponsiveContainer } from 'recharts';
// import { collection, getDocs } from 'firebase/firestore';
// import { firestore } from '../../Firebase/config';
// import { toast } from 'sonner';

// const Dashboard = () => {
//   const [activeTab, setActiveTab] = useState('overview');
//   const [searchTerm, setSearchTerm] = useState('');
//   const [filterGrade, setFilterGrade] = useState('all');
//   const [filterExam, setFilterExam] = useState('all');
//   const [dashboardStats, setDashboardStats] = useState({
//     totalStudents: 0,
//     resultsPublished: 0,
//     pendingResults: 0,
//     averageScore: 0,
//     passRate: 0,
//   });
//   const [gradeDistribution, setGradeDistribution] = useState([]);
//   const [monthlyResults, setMonthlyResults] = useState([]);
//   const [recentResults, setRecentResults] = useState([]);
//   const [exams, setExams] = useState([]);
//   const [loading, setLoading] = useState(true);

//   // Helper function to calculate grade based on average score
//   const calculateGrade = (avgScore) => {
//     if (avgScore >= 90) return 'A+';
//     if (avgScore >= 80) return 'A';
//     if (avgScore >= 70) return 'B+';
//     if (avgScore >= 60) return 'B';
//     if (avgScore >= 50) return 'C+';
//     return 'C';
//   };

//   useEffect(() => {
//     const fetchDashboardData = async () => {
//       try {
//         setLoading(true);

//         // Fetch students, exams, and examMarks concurrently
//         const [studentsSnapshot, examsSnapshot, examMarksSnapshot] = await Promise.all([
//           getDocs(collection(firestore, 'students')),
//           getDocs(collection(firestore, 'exams')),
//           getDocs(collection(firestore, 'examMarks')),
//         ]);

//         const totalStudents = studentsSnapshot.docs.length;
//         const examsData = examsSnapshot.docs.map(doc => ({
//           id: doc.id,
//           examName: doc.data().name || 'Unknown Exam', // Use 'name' instead of 'examName'
//         }));
//         const totalExams = examsData.length;

//         // Create lookup maps for students (using regNo) and exams
//         const studentMap = new Map(studentsSnapshot.docs.map(doc => [doc.data().regNo, doc.data().name || 'Unknown Student']));
//         const examMap = new Map(examsData.map(exam => [exam.id, exam.examName]));

//         let resultsPublished = 0;
//         let totalScores = 0;
//         let passingResults = 0;
//         const gradeCounts = { 'A+': 0, A: 0, 'B+': 0, B: 0, 'C+': 0, C: 0 };
//         const monthlyData = {};
//         const recentResultsData = [];

//         // Process examMarks
//         examMarksSnapshot.forEach((resultDoc) => {
//           const result = resultDoc.data();
//           const regNo = result.regNo;
//           const studentName = studentMap.get(regNo) || 'Unknown Student';

//           const totalScore = result.subjects?.reduce((sum, subject) => sum + (subject.score || 0), 0) || 0;
//           const avgScore = result.subjects?.length ? totalScore / result.subjects.length : 0;
//           const grade = calculateGrade(avgScore);

//           resultsPublished++;
//           totalScores += avgScore;
//           if (avgScore >= 60) passingResults++;

//           // Update grade counts
//           gradeCounts[grade]++;

//           // Update monthly data
//           const date = result.date
//             ? new Date(result.date) // Parse ISO string
//             : new Date(); // Fallback to current date
//           const month = date.toLocaleString('en-US', { month: 'short' });
//           monthlyData[month] = monthlyData[month] || { published: 0, pending: 0 };
//           monthlyData[month].published++;

//           // Collect recent results (limit to 10)
//           if (recentResultsData.length < 10) {
//             recentResultsData.push({
//               id: resultDoc.id,
//               student: studentName,
//               course: examMap.get(result.examId) || result.examName || 'Unknown Exam',
//               grade,
//               score: avgScore.toFixed(1),
//               date: date.toLocaleDateString('en-US', {
//                 year: 'numeric',
//                 month: 'short',
//                 day: 'numeric',
//               }),
//               examId: result.examId || '',
//             });
//           }
//         });

//         // Calculate pending results
//         const pendingResults = totalStudents * totalExams - resultsPublished;

//         // Prepare grade distribution data
//         const totalGrades = Object.values(gradeCounts).reduce((sum, count) => sum + count, 0);
//         const gradeDistributionData = Object.entries(gradeCounts).map(([grade, count]) => ({
//           grade,
//           count,
//           percentage: totalGrades ? ((count / totalGrades) * 100).toFixed(1) : 0,
//           color:
//             grade === 'A+'
//               ? '#10B981'
//               : grade === 'A'
//               ? '#3B82F6'
//               : grade === 'B+'
//               ? '#8B5CF6'
//               : grade === 'B'
//               ? '#F59E0B'
//               : grade === 'C+'
//               ? '#EF4444'
//               : '#6B7280',
//         }));

//         // Prepare monthly results data
//         const months = [  'Aug', 'Dec','Mar',];
//         const monthlyResultsData = months.map((month) => ({
//           month,
//           published: monthlyData[month]?.published || 0,
//           pending: totalStudents - (monthlyData[month]?.published || 0),
//         }));

//         // Update state
//         setDashboardStats({
//           totalStudents,
//           resultsPublished,
//           pendingResults,
//           averageScore: resultsPublished ? (totalScores / resultsPublished).toFixed(1) : 0,
//           passRate: resultsPublished ? ((passingResults / resultsPublished) * 100).toFixed(1) : 0,
//         });
//         setGradeDistribution(gradeDistributionData);
//         setMonthlyResults(monthlyResultsData);
//         setRecentResults(recentResultsData.sort((a, b) => new Date(b.date) - new Date(a.date)));
//         setExams(examsData);
//         setLoading(false);
//       } catch (err) {
//         console.error('Error fetching dashboard data:', err);
//         toast.error('Failed to load dashboard data');
//         setLoading(false);
//       }
//     };

//     fetchDashboardData();
//   }, []);

//   // Filter results based on search term, grade, and exam
//   const filteredRecentResults = recentResults.filter(
//     (result) =>
//       result.student.toLowerCase().includes(searchTerm.toLowerCase()) &&
//       (filterGrade === 'all' || result.grade === filterGrade) &&
//       (filterExam === 'all' || result.examId === filterExam)
//   );

//   const StatCard = ({ icon: Icon, title, value, subtitle, trend, color = 'blue' }) => (
//     <div className="bg-white rounded-xl shadow p-6 border border-gray-100 hover:shadow-lg transition-shadow duration-300">
//       <div className="flex items-center justify-between mb-4">
//         <div className={`p-3 rounded-lg bg-${color}-100`}>
//           <Icon className={`w-6 h-6 text-${color}-600`} />
//         </div>
//         {trend && (
//           <div className="flex items-center text-green-600">
//             <TrendingUp className="w-4 h-4 mr-1" />
//             <span className="text-sm font-medium">+{trend}%</span>
//           </div>
//         )}
//       </div>
//       <h3 className="text-2xl font-bold text-gray-900 mb-1">{value}</h3>
//       <p className="text-gray-600 text-sm">{title}</p>
//       {subtitle && <p className="text-xs text-gray-500 mt-1">{subtitle}</p>}
//     </div>
//   );

//   if (loading) {
//     return (
//       <div className="flex justify-center items-center min-h-screen">
//         <div className="animate-spin rounded-full h-7 w-7 border-t-2 border-b-2 border-blue-500"></div>
//       </div>
//     );
//   }

//   return (
//     <div className="min-h-screen bg-gradient-to-br from-white to-blue-50">
//       {/* Header */}
//       <header>
//         <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
//           <div className="flex justify-end items-center h-16">
//             <div className="flex items-center space-x-4">
//               <div className="relative">
//                 <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
//                 <input
//                   type="text"
//                   placeholder="Search students..."
//                   className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//                   value={searchTerm}
//                   onChange={(e) => setSearchTerm(e.target.value)}
//                 />
//               </div>
//               <button className="p-2 text-gray-400 hover:text-gray-600 relative">
//                 <Bell className="w-6 h-6" />
//                 <span className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></span>
//               </button>
//             </div>
//           </div>
//         </div>
//       </header>

//       <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
//         {/* Navigation Tabs */}
//         <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg mb-8 w-fit">
//           {[
//             { id: 'overview', label: 'Overview', icon: BarChart3 },
//             { id: 'results', label: 'Results', icon: Award },
//             { id: 'analytics', label: 'Analytics', icon: PieChart },
//           ].map((tab) => (
//             <button
//               key={tab.id}
//               onClick={() => setActiveTab(tab.id)}
//               className={`flex items-center space-x-2 px-4 py-2 rounded-md transition-all duration-200 ${
//                 activeTab === tab.id
//                   ? 'bg-white shadow-sm text-blue-600 font-medium'
//                   : 'text-gray-600 hover:text-gray-900'
//               }`}
//             >
//               <tab.icon className="w-4 h-4 hidden sm:block" />
//               <span>{tab.label}</span>
//             </button>
//           ))}
//         </div>

//         {/* Overview Tab */}
//         {activeTab === 'overview' && (
//           <div className="space-y-8">
//             {/* Stats Grid */}
//             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
//               <StatCard
//                 icon={Users}
//                 title="Total Students"
//                 value={dashboardStats.totalStudents.toLocaleString()}
//                 subtitle="Active enrollments"
//                 trend={12} // Placeholder
//                 color="blue"
//               />
//               <StatCard
//                 icon={Award}
//                 title="Results Published"
//                 value={dashboardStats.resultsPublished}
//                 subtitle={`${dashboardStats.totalStudents ? ((dashboardStats.resultsPublished / (dashboardStats.totalStudents * exams.length)) * 100).toFixed(1) : 0}% of total`}
//                 trend={8} // Placeholder
//                 color="green"
//               />
//               <StatCard
//                 icon={Calendar}
//                 title="Pending Results"
//                 value={dashboardStats.pendingResults}
//                 subtitle="Awaiting publication"
//                 color="orange"
//               />
//               <StatCard
//                 icon={TrendingUp}
//                 title="Average Score"
//                 value={`${dashboardStats.averageScore}%`}
//                 subtitle="Class performance"
//                 trend={3} // Placeholder
//                 color="purple"
//               />
//               <StatCard
//                 icon={BookOpen}
//                 title="Pass Rate"
//                 value={`${dashboardStats.passRate}%`}
//                 subtitle="Above 60% score"
//                 trend={5} // Placeholder
//                 color="emerald"
//               />
//             </div>

//             {/* Charts Section */}
//             <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
//               {/* Monthly Results Chart */}
//               <div className="bg-white rounded-xl shadow-lg p-6">
//                 <div className="flex items-center justify-between mb-6">
//                   <h3 className="text-lg font-semibold text-gray-900">Monthly Results Trend</h3>
//                   <button className="text-gray-400 hover:text-gray-600">
//                   </button>
//                 </div>
//                 <ResponsiveContainer width="100%" height={300}>
//                   <BarChart data={monthlyResults}>
//                     <CartesianGrid strokeDasharray="3 3" />
//                     <XAxis dataKey="month" />
//                     <YAxis />
//                     <Tooltip />
//                     <Bar dataKey="published" fill="#3B82F6" name="Published" />
//                     <Bar dataKey="pending" fill="#F59E0B" name="Pending" />
//                   </BarChart>
//                 </ResponsiveContainer>
//               </div>

//               {/* Grade Distribution */}
//               <div className="bg-white rounded-xl shadow-lg p-6">
//                 <div className="flex items-center justify-between mb-6">
//                   <h3 className="text-lg font-semibold text-gray-900">Grade Distribution</h3>
//                   <button className="text-gray-400 hover:text-gray-600">
//                   </button>
//                 </div>
//                 <ResponsiveContainer width="100%" height={300}>
//                   <RechartsPieChart>
//                     <Pie
//                       data={gradeDistribution}
//                       cx="50%"
//                       cy="50%"
//                       outerRadius={80}
//                       dataKey="count"
//                       label={({ grade, percentage }) => `${grade} (${percentage}%)`}
//                     >
//                       {gradeDistribution.map((entry, index) => (
//                         <Cell key={`cell-${index}`} fill={entry.color} />
//                       ))}
//                     </Pie>
//                     <Tooltip />
//                   </RechartsPieChart>
//                 </ResponsiveContainer>
//               </div>
//             </div>
//           </div>
//         )}

//         {/* Results Tab */}
//         {activeTab === 'results' && (
//           <div className="space-y-6">
//             {/* Filters */}
//             <div className="flex flex-wrap items-center gap-4 bg-white p-4 rounded-lg shadow-sm">
//               <div className="flex items-center space-x-2">
//                 <Filter className="w-5 h-5 text-gray-400" />
//                 <span className="text-sm font-medium text-gray-700">Filter by:</span>
//               </div>
//               <select
//                 value={filterGrade}
//                 onChange={(e) => setFilterGrade(e.target.value)}
//                 className="border border-gray-300 rounded-md px-3 py-1 text-sm focus:ring-2 focus:ring-blue-500"
//               >
//                 <option value="all">All Grades</option>
//                 {gradeDistribution.map((grade) => (
//                   <option key={grade.grade} value={grade.grade}>
//                     {grade.grade}
//                   </option>
//                 ))}
//               </select>
//               <select
//                 value={filterExam}
//                 onChange={(e) => setFilterExam(e.target.value)}
//                 className="border border-gray-300 rounded-md px-3 py-1 text-sm focus:ring-2 focus:ring-blue-500"
//               >
//                 <option value="all">All Exams</option>
//                 {exams.map((exam) => (
//                   <option key={exam.id} value={exam.examName}>
//                     {exam.examName}
//                   </option>
//                 ))}
//               </select>
//             </div>

//             {/* Recent Results Table */}
//             <div className="bg-white rounded-md shadow overflow-hidden border">
//               <div className="px-6 py-4 border-b border-gray-200 bg-gray-50 ">
//                 <h3 className="text-lg font-semibold text-gray-900 ">Recent Results</h3>
//               </div>
//               <div className="overflow-x-auto">
//                 <table className="w-full">
//                   <thead className="bg-[#3d4577]">
//                     <tr>
//                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Student</th>
//                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Exam</th>
//                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Grade</th>
//                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Score</th>
//                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Date</th>
//                     </tr>
//                   </thead>
//                   <tbody className="bg-white divide-y divide-gray-200">
//                     {filteredRecentResults.map((result) => (
//                       <tr key={result.id} className="hover:bg-gray-50 transition-colors">
//                         <td className="px-6 py-4 whitespace-nowrap">
//                           <div className="flex items-center">
//                             <div className="w-8 h-8 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
//                               {result.student.split(' ').map((n) => n[0]).join('').toUpperCase()}
//                             </div>
//                             <div className="ml-3">
//                               <div className="text-sm font-medium text-gray-900">{result.student}</div>
//                             </div>
//                           </div>
//                         </td>
//                         <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{result.course}</td>
//                         <td className="px-6 py-4 whitespace-nowrap">
//                           <span
//                             className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
//                               result.grade.startsWith('A')
//                                 ? 'bg-green-100 text-green-800'
//                                 : result.grade.startsWith('B')
//                                 ? 'bg-blue-100 text-blue-800'
//                                 : 'bg-yellow-100 text-yellow-800'
//                             }`}
//                           >
//                             {result.grade}
//                           </span>
//                         </td>
//                         <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{result.score}%</td>
//                         <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.date}</td>
//                       </tr>
//                     ))}
//                   </tbody>
//                 </table>
//               </div>
//             </div>
//           </div>
//         )}

//         {/* Analytics Tab */}
//         {activeTab === 'analytics' && (
//           <div className="space-y-8">
//             <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
//               {/* Performance Trend */}
//               <div className="bg-white rounded-xl shadow-lg p-6">
//                 <h3 className="text-lg font-semibold text-gray-900 mb-6">Performance Trend</h3>
//                 <ResponsiveContainer width="100%" height={300}>
//                   <LineChart data={monthlyResults}>
//                     <CartesianGrid strokeDasharray="3 3" />
//                     <XAxis dataKey="month" />
//                     <YAxis />
//                     <Tooltip />
//                     <Line type="monotone" dataKey="published" stroke="#3B82F6" strokeWidth={3} />
//                   </LineChart>
//                 </ResponsiveContainer>
//               </div>

//               {/* Grade Statistics */}
//               <div className="bg-white rounded-xl shadow-lg p-6">
//                 <h3 className="text-lg font-semibold text-gray-900 mb-6">Grade Statistics</h3>
//                 <div className="space-y-4">
//                   {gradeDistribution.map((grade, index) => (
//                     <div key={index} className="flex items-center justify-between">
//                       <div className="flex items-center space-x-3">
//                         <div className={`w-4 h-4 rounded`} style={{ backgroundColor: grade.color }}></div>
//                         <span className="font-medium text-gray-900">Grade {grade.grade}</span>
//                       </div>
//                       <div className="flex items-center space-x-2">
//                         <span className="text-sm text-gray-600">{grade.count} students</span>
//                         <span className="text-sm font-medium text-gray-900">{grade.percentage}%</span>
//                       </div>
//                     </div>
//                   ))}
//                 </div>
//               </div>
//             </div>
//           </div>
//         )}
//       </div>
//     </div>
//   );
// };

// export default Dashboard;